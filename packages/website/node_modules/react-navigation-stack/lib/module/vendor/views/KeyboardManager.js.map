{"version":3,"sources":["KeyboardManager.tsx"],"names":["React","TextInput","Keyboard","KeyboardManager","Component","keyboardTimeout","undefined","clearTimeout","props","enabled","clearKeyboardTimeout","input","State","currentlyFocusedField","blurTextInput","previouslyFocusedTextInput","startTimestamp","Date","now","dismiss","setTimeout","focusTextInput","componentWillUnmount","render","children","onPageChangeStart","handlePageChangeStart","onPageChangeConfirm","handlePageChangeConfirm","onPageChangeCancel","handlePageChangeCancel"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,cAApC;AAWA,eAAe,MAAMC,eAAN,SAA8BH,KAAK,CAACI,SAApC,CAAqD;AAAA;AAAA;;AAAA,wDAOd,IAPc;;AAAA,4CAQjC,CARiC;;AAAA;;AAAA,kDAWnC,MAAM;AACnC,UAAI,KAAKC,eAAL,KAAyBC,SAA7B,EAAwC;AACtCC,QAAAA,YAAY,CAAC,KAAKF,eAAN,CAAZ;AACA,aAAKA,eAAL,GAAuBC,SAAvB;AACD;AACF,KAhBiE;;AAAA,mDAkBlC,MAAM;AACpC,UAAI,CAAC,KAAKE,KAAL,CAAWC,OAAhB,EAAyB;AACvB;AACD;;AAED,WAAKC,oBAAL;AAEA,YAAMC,KAAK,GAAGV,SAAS,CAACW,KAAV,CAAgBC,qBAAhB,EAAd,CAPoC,CASpC;;AACAZ,MAAAA,SAAS,CAACW,KAAV,CAAgBE,aAAhB,CAA8BH,KAA9B,EAVoC,CAYpC;;AACA,WAAKI,0BAAL,GAAkCJ,KAAlC,CAboC,CAepC;;AACA,WAAKK,cAAL,GAAsBC,IAAI,CAACC,GAAL,EAAtB;AACD,KAnCiE;;AAAA,qDAqChC,MAAM;AACtC,UAAI,CAAC,KAAKV,KAAL,CAAWC,OAAhB,EAAyB;AACvB;AACD;;AAED,WAAKC,oBAAL;AAEAR,MAAAA,QAAQ,CAACiB,OAAT,GAPsC,CAStC;;AACA,WAAKJ,0BAAL,GAAkC,IAAlC;AACD,KAhDiE;;AAAA,oDAkDjC,MAAM;AACrC,UAAI,CAAC,KAAKP,KAAL,CAAWC,OAAhB,EAAyB;AACvB;AACD;;AAED,WAAKC,oBAAL,GALqC,CAOrC;;AACA,YAAMC,KAAK,GAAG,KAAKI,0BAAnB;;AAEA,UAAIJ,KAAJ,EAAW;AACT;AAEA;AACA;AACA;AACA;AACA;AACA,YAAIM,IAAI,CAACC,GAAL,KAAa,KAAKF,cAAlB,GAAmC,GAAvC,EAA4C;AAC1C,eAAKX,eAAL,GAAuBe,UAAU,CAAC,MAAM;AACtCnB,YAAAA,SAAS,CAACW,KAAV,CAAgBS,cAAhB,CAA+BV,KAA/B;AACA,iBAAKI,0BAAL,GAAkC,IAAlC;AACD,WAHgC,EAG9B,GAH8B,CAAjC;AAID,SALD,MAKO;AACLd,UAAAA,SAAS,CAACW,KAAV,CAAgBS,cAAhB,CAA+BV,KAA/B;AACA,eAAKI,0BAAL,GAAkC,IAAlC;AACD;AACF;AACF,KA9EiE;AAAA;;AAClEO,EAAAA,oBAAoB,GAAG;AACrB,SAAKZ,oBAAL;AACD,GAHiE,CAKlE;AACA;;;AA0EAa,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKf,KAAL,CAAWgB,QAAX,CAAoB;AACzBC,MAAAA,iBAAiB,EAAE,KAAKC,qBADC;AAEzBC,MAAAA,mBAAmB,EAAE,KAAKC,uBAFD;AAGzBC,MAAAA,kBAAkB,EAAE,KAAKC;AAHA,KAApB,CAAP;AAKD;;AAtFiE","sourcesContent":["import * as React from 'react';\nimport { TextInput, Keyboard } from 'react-native';\n\ntype Props = {\n  enabled: boolean;\n  children: (props: {\n    onPageChangeStart: () => void;\n    onPageChangeConfirm: () => void;\n    onPageChangeCancel: () => void;\n  }) => React.ReactNode;\n};\n\nexport default class KeyboardManager extends React.Component<Props> {\n  componentWillUnmount() {\n    this.clearKeyboardTimeout();\n  }\n\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: number | null = null;\n  private startTimestamp: number = 0;\n  private keyboardTimeout: any;\n\n  private clearKeyboardTimeout = () => {\n    if (this.keyboardTimeout !== undefined) {\n      clearTimeout(this.keyboardTimeout);\n      this.keyboardTimeout = undefined;\n    }\n  };\n\n  private handlePageChangeStart = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    const input = TextInput.State.currentlyFocusedField();\n\n    // When a page change begins, blur the currently focused input\n    TextInput.State.blurTextInput(input);\n\n    // Store the id of this input so we can refocus it if change was cancelled\n    this.previouslyFocusedTextInput = input;\n\n    // Store timestamp for touch start\n    this.startTimestamp = Date.now();\n  };\n\n  private handlePageChangeConfirm = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    Keyboard.dismiss();\n\n    // Cleanup the ID on successful page change\n    this.previouslyFocusedTextInput = null;\n  };\n\n  private handlePageChangeCancel = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    // The page didn't change, we should restore the focus of text input\n    const input = this.previouslyFocusedTextInput;\n\n    if (input) {\n      // If the interaction was super short we should make sure keyboard won't hide again.\n\n      // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n      // During first ~100ms keyboard will be dismissed no matter what,\n      // so we have to make sure it won't interrupt input refocus logic.\n      // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n      // Subtracting timestamps makes us sure the delay is executed only when needed.\n      if (Date.now() - this.startTimestamp < 100) {\n        this.keyboardTimeout = setTimeout(() => {\n          TextInput.State.focusTextInput(input);\n          this.previouslyFocusedTextInput = null;\n        }, 100);\n      } else {\n        TextInput.State.focusTextInput(input);\n        this.previouslyFocusedTextInput = null;\n      }\n    }\n  };\n\n  render() {\n    return this.props.children({\n      onPageChangeStart: this.handlePageChangeStart,\n      onPageChangeConfirm: this.handlePageChangeConfirm,\n      onPageChangeCancel: this.handlePageChangeCancel,\n    });\n  }\n}\n"]}