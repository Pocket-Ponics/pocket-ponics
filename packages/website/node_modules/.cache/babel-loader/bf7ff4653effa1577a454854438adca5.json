{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport contains from 'dom-helpers/contains';\nimport React, { cloneElement, useCallback, useRef, useState } from 'react';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport ReactDOM from 'react-dom';\nimport warning from 'warning';\nimport Overlay from './Overlay';\n\nvar RefHolder = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(RefHolder, _React$Component);\n\n  function RefHolder() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = RefHolder.prototype;\n\n  _proto.render = function render() {\n    return this.props.children;\n  };\n\n  return RefHolder;\n}(React.Component);\n\nfunction normalizeDelay(delay) {\n  return delay && typeof delay === 'object' ? delay : {\n    show: delay,\n    hide: delay\n  };\n} // Simple implementation of mouseEnter and mouseLeave.\n// React's built version is broken: https://github.com/facebook/react/issues/4251\n// for cases when the trigger is disabled and mouseOut/Over can cause flicker\n// moving from one child element to another.\n\n\nfunction handleMouseOverOut(handler, e, relatedNative) {\n  var target = e.currentTarget;\n  var related = e.relatedTarget || e.nativeEvent[relatedNative];\n\n  if ((!related || related !== target) && !contains(target, related)) {\n    handler(e);\n  }\n}\n\nvar defaultProps = {\n  defaultShow: false,\n  trigger: ['hover', 'focus']\n};\n\nfunction OverlayTrigger(_ref) {\n  var trigger = _ref.trigger,\n      overlay = _ref.overlay,\n      children = _ref.children,\n      _ref$popperConfig = _ref.popperConfig,\n      popperConfig = _ref$popperConfig === void 0 ? {} : _ref$popperConfig,\n      defaultShow = _ref.defaultShow,\n      propsDelay = _ref.delay,\n      props = _objectWithoutPropertiesLoose(_ref, [\"trigger\", \"overlay\", \"children\", \"popperConfig\", \"defaultShow\", \"delay\"]);\n\n  var triggerNodeRef = useRef(null);\n  var timeout = useTimeout();\n  var hoverStateRef = useRef();\n\n  var _useState = useState(!!defaultShow),\n      show = _useState[0],\n      setShow = _useState[1];\n\n  var delay = normalizeDelay(propsDelay);\n  var child = React.Children.only(children);\n  var _child$props = child.props,\n      onFocus = _child$props.onFocus,\n      onBlur = _child$props.onBlur,\n      onClick = _child$props.onClick;\n  var getTarget = useCallback(function () {\n    return ReactDOM.findDOMNode(triggerNodeRef.current);\n  }, []);\n  var handleShow = useCallback(function () {\n    timeout.clear();\n    hoverStateRef.current = 'show';\n\n    if (!delay.show) {\n      setShow(true);\n      return;\n    }\n\n    timeout.set(function () {\n      if (hoverStateRef.current === 'show') setShow(true);\n    }, delay.show);\n  }, [delay.show, timeout]);\n  var handleHide = useCallback(function () {\n    timeout.clear();\n    hoverStateRef.current = 'hide';\n\n    if (!delay.hide) {\n      setShow(false);\n      return;\n    }\n\n    timeout.set(function () {\n      if (hoverStateRef.current === 'hide') setShow(false);\n    }, delay.hide);\n  }, [delay.hide, timeout]);\n  var handleFocus = useCallback(function (e) {\n    handleShow(e);\n    if (onFocus) onFocus(e);\n  }, [handleShow, onFocus]);\n  var handleBlur = useCallback(function (e) {\n    handleHide(e);\n    if (onBlur) onBlur(e);\n  }, [handleHide, onBlur]);\n  var handleClick = useCallback(function (e) {\n    setShow(function (prevShow) {\n      return !prevShow;\n    });\n    if (onClick) onClick(e);\n  }, [onClick]);\n  var handleMouseOver = useCallback(function (e) {\n    handleMouseOverOut(handleShow, e, 'fromElement');\n  }, [handleShow]);\n  var handleMouseOut = useCallback(function (e) {\n    handleMouseOverOut(handleHide, e, 'toElement');\n  }, [handleHide]); // We add aria-describedby in the case where the overlay is a role=\"tooltip\"\n  // for other cases describedby isn't appropriate (e.g. a popover with inputs) so we don't add it.\n\n  var ariaModifier = {\n    enabled: true,\n    order: 900,\n    fn: function fn(data) {\n      var popper = data.instance.popper;\n      var target = getTarget();\n      if (!show || !target) return data;\n      var role = popper.getAttribute('role') || '';\n\n      if (popper.id && role.toLowerCase() === 'tooltip') {\n        target.setAttribute('aria-describedby', popper.id);\n      }\n\n      return data;\n    }\n  };\n  var triggers = trigger == null ? [] : [].concat(trigger);\n  var triggerProps = {};\n\n  if (triggers.indexOf('click') !== -1) {\n    triggerProps.onClick = handleClick;\n  }\n\n  if (triggers.indexOf('focus') !== -1) {\n    triggerProps.onFocus = handleFocus;\n    triggerProps.onBlur = handleBlur;\n  }\n\n  if (triggers.indexOf('hover') !== -1) {\n    process.env.NODE_ENV !== \"production\" ? warning(triggers.length > 1, '[react-bootstrap] Specifying only the `\"hover\"` trigger limits the visibility of the overlay to just mouse users. Consider also including the `\"focus\"` trigger so that touch and keyboard only users can see the overlay as well.') : void 0;\n    triggerProps.onMouseOver = handleMouseOver;\n    triggerProps.onMouseOut = handleMouseOut;\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(RefHolder, {\n    ref: triggerNodeRef\n  }, cloneElement(child, triggerProps)), React.createElement(Overlay, _extends({}, props, {\n    popperConfig: _extends({}, popperConfig, {\n      modifiers: _extends({}, popperConfig.modifiers, {\n        ariaModifier: ariaModifier\n      })\n    }),\n    show: show,\n    onHide: handleHide,\n    target: getTarget\n  }), overlay));\n}\n\nOverlayTrigger.defaultProps = defaultProps;\nexport default OverlayTrigger;","map":null,"metadata":{},"sourceType":"module"}